// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using automation.mbtdistr.ru.Data;

#nullable disable

namespace automation.mbtdistr.ru.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250513185942_first")]
    partial class first
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ReturnMainInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimId")
                        .HasColumnType("longtext");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("longtext");

                    b.Property<long?>("NmId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("PostingNumber")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("ProductsSku")
                        .HasColumnType("longtext");

                    b.Property<int>("ReturnId")
                        .HasColumnType("int");

                    b.Property<long?>("ReturnInfoId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReturnReasonName")
                        .HasColumnType("longtext");

                    b.Property<string>("ReturnStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Schema")
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ReturnId")
                        .IsUnique();

                    b.ToTable("ReturnMainInfo");
                });

            modelBuilder.Entity("WorkerCabinets", b =>
                {
                    b.Property<int>("WorkerId")
                        .HasColumnType("int");

                    b.Property<int>("CabinetId")
                        .HasColumnType("int");

                    b.HasKey("WorkerId", "CabinetId");

                    b.HasIndex("CabinetId");

                    b.ToTable("WorkerCabinets", (string)null);
                });

            modelBuilder.Entity("automation.mbtdistr.ru.Models.Cabinet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Marketplace")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Cabinets");
                });

            modelBuilder.Entity("automation.mbtdistr.ru.Models.CabinetSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CabinetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CabinetId")
                        .IsUnique();

                    b.ToTable("CabinetSettings");
                });

            modelBuilder.Entity("automation.mbtdistr.ru.Models.Compensation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ReturnId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ReturnId")
                        .IsUnique();

                    b.ToTable("Compensations");
                });

            modelBuilder.Entity("automation.mbtdistr.ru.Models.ConnectionParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CabinetSettingsId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .HasColumnType("longtext");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CabinetSettingsId");

                    b.ToTable("ConnectionParameters");
                });

            modelBuilder.Entity("automation.mbtdistr.ru.Models.NotificationOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsReceiveNotification")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("NotificationLevels")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("WorkerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkerId")
                        .IsUnique();

                    b.ToTable("NotificationOptions");
                });

            modelBuilder.Entity("automation.mbtdistr.ru.Models.Return", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CabinetId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("OrderedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ReturnReason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CabinetId");

                    b.ToTable("Returns");
                });

            modelBuilder.Entity("automation.mbtdistr.ru.Models.Worker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("TelegramId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("automation.mbtdistr.ru.Services.YandexMarket.Models.YMSupplyRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int?>("CabinetId")
                        .HasColumnType("int");

                    b.Property<int?>("CountersId")
                        .HasColumnType("int");

                    b.Property<long?>("ExternalIdId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Subtype")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("TargetLocationServiceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TransitLocationServiceId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CabinetId");

                    b.HasIndex("CountersId");

                    b.HasIndex("ExternalIdId");

                    b.HasIndex("TargetLocationServiceId");

                    b.HasIndex("TransitLocationServiceId");

                    b.ToTable("YMSupplyRequests");
                });

            modelBuilder.Entity("automation.mbtdistr.ru.Services.YandexMarket.YMCurrencyValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CurrencyId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.Property<int>("YMSupplyRequestItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("YMSupplyRequestItemId")
                        .IsUnique();

                    b.ToTable("YMCurrencyValue");
                });

            modelBuilder.Entity("automation.mbtdistr.ru.Services.YandexMarket.YMSupplyRequestCounters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActualBoxCount")
                        .HasColumnType("int");

                    b.Property<int>("ActualPalletsCount")
                        .HasColumnType("int");

                    b.Property<int>("DefectCount")
                        .HasColumnType("int");

                    b.Property<int>("FactCount")
                        .HasColumnType("int");

                    b.Property<int>("PlanCount")
                        .HasColumnType("int");

                    b.Property<int>("UndefinedCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("YMSupplyRequestCounters");
                });

            modelBuilder.Entity("automation.mbtdistr.ru.Services.YandexMarket.YMSupplyRequestId", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("MarketplaceRequestId")
                        .HasColumnType("longtext");

                    b.Property<string>("WarehouseRequestId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("YMSupplyRequestId");
                });

            modelBuilder.Entity("automation.mbtdistr.ru.Services.YandexMarket.YMSupplyRequestItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountersId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OfferId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<long?>("YMSupplyRequestId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CountersId");

                    b.HasIndex("YMSupplyRequestId");

                    b.ToTable("YMSupplyRequestItem");
                });

            modelBuilder.Entity("automation.mbtdistr.ru.Services.YandexMarket.YMSupplyRequestItemCounters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DefectCount")
                        .HasColumnType("int");

                    b.Property<int>("FactCount")
                        .HasColumnType("int");

                    b.Property<int>("PlanCount")
                        .HasColumnType("int");

                    b.Property<int>("ShortageCount")
                        .HasColumnType("int");

                    b.Property<int>("SurplusCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("YMSupplyRequestItemCounters");
                });

            modelBuilder.Entity("automation.mbtdistr.ru.Services.YandexMarket.YMSupplyRequestLocation", b =>
                {
                    b.Property<long>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("ServiceId"));

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RequestedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ServiceId");

                    b.HasIndex("AddressId");

                    b.ToTable("YMSupplyRequestLocation");
                });

            modelBuilder.Entity("automation.mbtdistr.ru.Services.YandexMarket.YMSupplyRequestLocationAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("FullAddress")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("YMLocationAddresses");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReturnMainInfo", b =>
                {
                    b.HasOne("automation.mbtdistr.ru.Models.Return", "Return")
                        .WithOne("Info")
                        .HasForeignKey("ReturnMainInfo", "ReturnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Return");
                });

            modelBuilder.Entity("WorkerCabinets", b =>
                {
                    b.HasOne("automation.mbtdistr.ru.Models.Cabinet", null)
                        .WithMany()
                        .HasForeignKey("CabinetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("automation.mbtdistr.ru.Models.Worker", null)
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("automation.mbtdistr.ru.Models.CabinetSettings", b =>
                {
                    b.HasOne("automation.mbtdistr.ru.Models.Cabinet", "Cabinet")
                        .WithOne("Settings")
                        .HasForeignKey("automation.mbtdistr.ru.Models.CabinetSettings", "CabinetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cabinet");
                });

            modelBuilder.Entity("automation.mbtdistr.ru.Models.Compensation", b =>
                {
                    b.HasOne("automation.mbtdistr.ru.Models.Return", "Return")
                        .WithOne("Compensation")
                        .HasForeignKey("automation.mbtdistr.ru.Models.Compensation", "ReturnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Return");
                });

            modelBuilder.Entity("automation.mbtdistr.ru.Models.ConnectionParameter", b =>
                {
                    b.HasOne("automation.mbtdistr.ru.Models.CabinetSettings", "CabinetSettings")
                        .WithMany("ConnectionParameters")
                        .HasForeignKey("CabinetSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CabinetSettings");
                });

            modelBuilder.Entity("automation.mbtdistr.ru.Models.NotificationOptions", b =>
                {
                    b.HasOne("automation.mbtdistr.ru.Models.Worker", "Worker")
                        .WithOne("NotificationOptions")
                        .HasForeignKey("automation.mbtdistr.ru.Models.NotificationOptions", "WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("automation.mbtdistr.ru.Models.Return", b =>
                {
                    b.HasOne("automation.mbtdistr.ru.Models.Cabinet", "Cabinet")
                        .WithMany()
                        .HasForeignKey("CabinetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cabinet");
                });

            modelBuilder.Entity("automation.mbtdistr.ru.Services.YandexMarket.Models.YMSupplyRequest", b =>
                {
                    b.HasOne("automation.mbtdistr.ru.Models.Cabinet", "Cabinet")
                        .WithMany()
                        .HasForeignKey("CabinetId");

                    b.HasOne("automation.mbtdistr.ru.Services.YandexMarket.YMSupplyRequestCounters", "Counters")
                        .WithMany()
                        .HasForeignKey("CountersId");

                    b.HasOne("automation.mbtdistr.ru.Services.YandexMarket.YMSupplyRequestId", "ExternalId")
                        .WithMany()
                        .HasForeignKey("ExternalIdId");

                    b.HasOne("automation.mbtdistr.ru.Services.YandexMarket.YMSupplyRequestLocation", "TargetLocation")
                        .WithMany("AsTargetInRequests")
                        .HasForeignKey("TargetLocationServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("automation.mbtdistr.ru.Services.YandexMarket.YMSupplyRequestLocation", "TransitLocation")
                        .WithMany("AsTransitInRequests")
                        .HasForeignKey("TransitLocationServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Cabinet");

                    b.Navigation("Counters");

                    b.Navigation("ExternalId");

                    b.Navigation("TargetLocation");

                    b.Navigation("TransitLocation");
                });

            modelBuilder.Entity("automation.mbtdistr.ru.Services.YandexMarket.YMCurrencyValue", b =>
                {
                    b.HasOne("automation.mbtdistr.ru.Services.YandexMarket.YMSupplyRequestItem", "SupplyRequestItem")
                        .WithOne("Price")
                        .HasForeignKey("automation.mbtdistr.ru.Services.YandexMarket.YMCurrencyValue", "YMSupplyRequestItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupplyRequestItem");
                });

            modelBuilder.Entity("automation.mbtdistr.ru.Services.YandexMarket.YMSupplyRequestItem", b =>
                {
                    b.HasOne("automation.mbtdistr.ru.Services.YandexMarket.YMSupplyRequestItemCounters", "Counters")
                        .WithMany()
                        .HasForeignKey("CountersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("automation.mbtdistr.ru.Services.YandexMarket.Models.YMSupplyRequest", null)
                        .WithMany("Items")
                        .HasForeignKey("YMSupplyRequestId");

                    b.Navigation("Counters");
                });

            modelBuilder.Entity("automation.mbtdistr.ru.Services.YandexMarket.YMSupplyRequestLocation", b =>
                {
                    b.HasOne("automation.mbtdistr.ru.Services.YandexMarket.YMSupplyRequestLocationAddress", "Address")
                        .WithMany("LocationAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("automation.mbtdistr.ru.Services.YandexMarket.YMSupplyRequestLocationAddress", b =>
                {
                    b.OwnsOne("automation.mbtdistr.ru.Services.YandexMarket.YMGps", "Gps", b1 =>
                        {
                            b1.Property<long>("YMSupplyRequestLocationAddressId")
                                .HasColumnType("bigint");

                            b1.Property<decimal>("Latitude")
                                .HasColumnType("decimal(65,30)");

                            b1.Property<decimal>("Longitude")
                                .HasColumnType("decimal(65,30)");

                            b1.HasKey("YMSupplyRequestLocationAddressId");

                            b1.ToTable("YMLocationAddresses");

                            b1.WithOwner()
                                .HasForeignKey("YMSupplyRequestLocationAddressId");
                        });

                    b.Navigation("Gps")
                        .IsRequired();
                });

            modelBuilder.Entity("automation.mbtdistr.ru.Models.Cabinet", b =>
                {
                    b.Navigation("Settings")
                        .IsRequired();
                });

            modelBuilder.Entity("automation.mbtdistr.ru.Models.CabinetSettings", b =>
                {
                    b.Navigation("ConnectionParameters");
                });

            modelBuilder.Entity("automation.mbtdistr.ru.Models.Return", b =>
                {
                    b.Navigation("Compensation");

                    b.Navigation("Info")
                        .IsRequired();
                });

            modelBuilder.Entity("automation.mbtdistr.ru.Models.Worker", b =>
                {
                    b.Navigation("NotificationOptions")
                        .IsRequired();
                });

            modelBuilder.Entity("automation.mbtdistr.ru.Services.YandexMarket.Models.YMSupplyRequest", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("automation.mbtdistr.ru.Services.YandexMarket.YMSupplyRequestItem", b =>
                {
                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("automation.mbtdistr.ru.Services.YandexMarket.YMSupplyRequestLocation", b =>
                {
                    b.Navigation("AsTargetInRequests");

                    b.Navigation("AsTransitInRequests");
                });

            modelBuilder.Entity("automation.mbtdistr.ru.Services.YandexMarket.YMSupplyRequestLocationAddress", b =>
                {
                    b.Navigation("LocationAddresses");
                });
#pragma warning restore 612, 618
        }
    }
}
