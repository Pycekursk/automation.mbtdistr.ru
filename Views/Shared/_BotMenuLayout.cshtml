<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>@ViewData["Title"] - automation.mbtdistr.ru</title>

  <script src="~/lib/jquery/dist/jquery.js"></script>

  <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap-icons.css" />
  <link rel="stylesheet" href="~/lib/dx/css/bootstrap.css">

  <link rel="stylesheet" href="~/lib/dx/css/dx.dark.compact.css">

  <script src="~/js/devextreme/FileSaver.js"></script>
  <script src="~/js/devextreme/polyfill.min.js"></script>
  <script src="~/js/devextreme/exceljs.js"></script>
  <script src="~/js/devextreme/jszip.js"></script>
  @* <script src="~/js/devextreme/jspdf.umd.js"></script> *@

  <script type="text/javascript" src="~/js/devextreme/dx.all.js"></script>

  <script src="~/js/devextreme/aspnet/dx.aspnet.data.js"></script>
  <script src="~/js/devextreme/aspnet/dx.aspnet.mvc.js"></script>

  <script src="~/js/devextreme/localization/dx.messages.ru.js"></script>

  <script src="https://telegram.org/js/telegram-web-app.js"></script>

  <script>
          // Синхронные ошибки
    window.onerror = function (message, source, lineno, colno, error) {
      alert(`Ошибка: ${message}\nФайл: ${source}\nСтрока: ${lineno}:${colno}`);
    };

    // Ошибки в промисах без .catch()
    window.addEventListener("unhandledrejection", function (event) {
      alert(`Ошибка в промисе: ${event.reason}`);
    });

        // Целевой селектор
    const targetSelector = 'dx-license';

    // Функция для поиска второго вложенного элемента
    function handleDxLicenseAppeared(licenseElement) {
        const children = licenseElement.children;
        if (children.length >= 2) {
            const secondChild = children[1];
            secondChild.click();
        } 
    }

    const observer = new MutationObserver((mutations, obs) => {
        const licenseElement = document.querySelector(targetSelector);
        if (licenseElement) {
            handleDxLicenseAppeared(licenseElement);
            obs.disconnect(); // Отключаем наблюдатель после нахождения
        }
    });


          DevExpress.localization.locale('ru');



  </script>
  <style>
      .menu-buttons {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    gap: 0.5rem;
}

    body.dx-viewport {
      background-color: var(--dx-color-main-bg);
    }

    .dx-datagrid .wrap-text-cell {
      white-space: pre-wrap !important;
      word-wrap: break-word; /* переносит длинные слова */
    }
  </style>
</head>
<body class="dx-viewport">
  <script>
    observer.observe(document.body, {
        childList: true,
        subtree: true
    });
  </script>
  <div class="dx-viewport-inner">
    <script>
              function onExportingHandler(e) {
          const defaultName = defaultExportFileName;
          DevExpress.ui.dialog.custom({
              title: "Сохранить как",
              messageHtml: "<div>Введите имя файла:</div><input type='text' id='filenameInput' value='" + defaultName + "' style='width:100%' />",
              buttons: [
                  {
                      text: "Сохранить", onClick: () => {
                          const filename = document.getElementById('filenameInput').value || defaultName;
                          e.fileName = filename;

                          if (e.format === 'xlsx') {

                              var workbook = new ExcelJS.Workbook();
                              var worksheet = workbook.addWorksheet('Main sheet');
                              DevExpress.excelExporter.exportDataGrid({
                                  worksheet: worksheet,
                                  component: e.component,
                                  customizeCell: function (options) {
                                      options.excelCell.font = { name: 'Arial', size: 12 };
                                      options.excelCell.alignment = { horizontal: 'left' };
                                  }
                              }).then(function () {
                                  workbook.xlsx.writeBuffer().then(function (buffer) {
                                      saveAs(new Blob([buffer], { type: 'application/octet-stream' }), `${e.fileName}.xlsx`);
                                  });
                              });


                          }
                          else if (e.format === 'pdf') {
                              const doc = new jspdf.jsPDF();
                              DevExpress.pdfExporter.exportDataGrid({
                                  jsPDFDocument: doc,
                                  component: e.component,
                              }).then(() => {
                                  doc.save(`${e.fileName}.pdf`);
                              });

                          }




                      }
                  },
                  { text: "Отмена", onClick: () => e.cancel = true }
              ]
          }).show();

          // отменяем экспорт по умолчанию, он продолжится в диалоге
          e.cancel = true;
      }
//DevExpress.pdfMake = pdfMake;
    </script>

    <div class="container-fluid py-3">
      <main role="main">
        @RenderBody()
      </main>
    </div>

  </div>

  <script src="~/js/tgwebapp.js" asp-append-version="true"></script>
  @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
