<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>@ViewData["Title"] - automation.mbtdistr.ru</title>

  <script src="~/lib/jquery/dist/jquery.js"></script>

  <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap-icons.css" />
  <link rel="stylesheet" href="~/lib/dx/css/bootstrap.css">

  <link rel="stylesheet" href="~/lib/dx/css/dx.dark.compact.css">

  <script src="~/js/devextreme/FileSaver.js"></script>
  <script src="~/js/devextreme/polyfill.min.js"></script>
  <script src="~/js/devextreme/exceljs.js"></script>
  <script src="~/js/devextreme/jszip.js"></script>
  @* <script src="~/js/devextreme/jspdf.umd.js"></script> *@

  <script type="text/javascript" src="~/js/devextreme/dx.all.js"></script>

  <script src="~/js/devextreme/aspnet/dx.aspnet.data.js"></script>
  <script src="~/js/devextreme/aspnet/dx.aspnet.mvc.js"></script>

  <script src="~/js/devextreme/localization/dx.messages.ru.js"></script>

  <script src="https://telegram.org/js/telegram-web-app.js"></script>

  <script>
          // Синхронные ошибки
    window.onerror = function (message, source, lineno, colno, error) {
      alert(`Ошибка: ${message}\nФайл: ${source}\nСтрока: ${lineno}:${colno}`);
    };

    // Ошибки в промисах без .catch()
    window.addEventListener("unhandledrejection", function (event) {
      alert(`Ошибка в промисе: ${event.reason}`);
    });

        // Целевой селектор
    const targetSelector = 'dx-license';

    // Функция для поиска второго вложенного элемента
    function handleDxLicenseAppeared(licenseElement) {
        const children = licenseElement.children;
        if (children.length >= 2) {
            const secondChild = children[1];
            secondChild.click();
        } 
    }

    const observer = new MutationObserver((mutations, obs) => {
        const licenseElement = document.querySelector(targetSelector);
        if (licenseElement) {
            handleDxLicenseAppeared(licenseElement);
            obs.disconnect(); // Отключаем наблюдатель после нахождения
        }
    });


          DevExpress.localization.locale('ru');



  </script>
  <style>
      .menu-buttons {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    gap: 0.5rem;
}

    body.dx-viewport {
      background-color: var(--dx-color-main-bg);
    }

    .dx-datagrid .wrap-text-cell {
      white-space: pre-wrap !important;
      word-wrap: break-word; /* переносит длинные слова */
    }
  </style>
</head>
<body class="dx-viewport">
  <script>
    observer.observe(document.body, {
        childList: true,
        subtree: true
    });
     const tg = window.Telegram.WebApp;
    tg.ready();
   
    const userId = tg.initDataUnsafe?.user?.id;
 
  </script>
  <div class="dx-viewport-inner">

      <script>



          function onExportingHandler(e) {
              const workbook  = new ExcelJS.Workbook();
              const worksheet = workbook.addWorksheet('Возвраты');

              DevExpress.excelExporter.exportDataGrid({
                  component: e.component,
                  worksheet: worksheet,
                  topLeftCell: { row: 1, column: 1 }
              }).then(() => {
                  return workbook.xlsx.writeBuffer();
              }).then(buffer => {
                  // Собираем Blob и конвертим в base64
                  const blob = new Blob([buffer], {
                      type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                  });
                  const reader = new FileReader();
                  reader.onload = () => {
                      const base64 = reader.result.split(',')[1];
                      const fileName = defaultExportFileName + '.xlsx';
                      // Шлём на сервер
                      fetch('/api/TelegramBot/sendReturnsExcel', {
                          method: 'POST',
                          headers: { 'Content-Type': 'application/json' },
                          body: JSON.stringify({
                      chatId:   userId,
                              fileName: fileName,
                              base64:   base64
                          })
                      }).then(resp => {
                          if (!resp.ok) alert('Ошибка отправки отчёта' + userId);
                      });
                  };
                  reader.readAsDataURL(blob);
              });

              // отменяем стандартный экспорт
              e.cancel = true;
          }

          // Функция «Назад»
          function goBack() {
              window.history.back();
          }
      </script>


    <div class="container-fluid py-3">
      <main role="main">
        @RenderBody()
      </main>
    </div>

  </div>

  <script src="~/js/tgwebapp.js" asp-append-version="true"></script>
  @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
