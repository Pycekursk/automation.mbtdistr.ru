<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>@ViewData["Title"] - automation.mbtdistr.ru</title>

  <script src="~/lib/dx/js/jquery.js"></script>
  <script src="https://telegram.org/js/telegram-web-app.js"></script>
  <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap-icons.css" />
  <link rel="stylesheet" href="~/lib/dx/css/bootstrap.css">
  <link rel="stylesheet" href="~/lib/dx/css/dx.dark.css ">

  <script type="text/javascript" src="~/lib/dx/js/dx.all.js"></script>

  <script src="~/lib/dx/js/aspnet/dx.aspnet.data.js"></script>
  <script src="~/lib/dx/js/aspnet/dx.aspnet.mvc.js"></script>

  <script src="~/lib/dx/js/localization/dx.messages.ru.js"></script>

  <script>
          // Синхронные ошибки
    window.onerror = function (message, source, lineno, colno, error) {
      alert(`Ошибка: ${message}\nФайл: ${source}\nСтрока: ${lineno}:${colno}`);
    };

    // Ошибки в промисах без .catch()
    window.addEventListener("unhandledrejection", function (event) {
      alert(`Ошибка в промисе: ${event.reason}`);
    });

        // Целевой селектор
    const targetSelector = 'dx-license';

    // Функция для поиска второго вложенного элемента
    function handleDxLicenseAppeared(licenseElement) {
        const children = licenseElement.children;
        if (children.length >= 2) {
            const secondChild = children[1];
            secondChild.click();
            // здесь ваша логика
        } else {
        }
    }

    const observer = new MutationObserver((mutations, obs) => {
        const licenseElement = document.querySelector(targetSelector);
        if (licenseElement) {
            handleDxLicenseAppeared(licenseElement);
            obs.disconnect(); // Отключаем наблюдатель после нахождения
        }
    });
  </script>
</head>
<body class="dx-viewport">
  <script>
    observer.observe(document.body, {
        childList: true,
        subtree: true
    });
  </script>
  <div class="dx-viewport-inner">
    @*  <div class="row row-cols-2">
      <div class="mt-3 d-none" id="goback-wrapper">
        <button class="btn btn-link text-decoration-none text-light" id="goback"><i class="bi bi-arrow-left"></i> Назад</button>
        <script>
            if (!window.location.href.includes("/botmenu?id")) {
              document.getElementById("goback-wrapper").classList.remove("d-none");
            }
            document.getElementById("goback").addEventListener("click", function () {
            window.history.back();
          });
        </script>
      </div>
    </div> *@

    <div class="my-menu-container">
      @(Html.DevExtreme().TabPanel()           // используем NavBar вместо TabPanel
              .ID("mainMenuBar")
              .SelectedIndex(0)                  // по умолчанию первый пункт
              .OnItemClick("onMenuItemClick")    // JS-обработчик клика
              .ItemTemplate("menuItemTemplate")  // шаблон отрисовки пункта
              )
    </div>

    <script>
      // Шаблон одного пункта меню: иконка + текст
      function menuItemTemplate(itemData) {
          return `
              <div class="menu-item">
                  <i class="dx-icon dx-icon-${itemData.icon}"></i>
                  <span>${itemData.text}</span>
              </div>`;
      }

      // При клике — делаем переход по Route
      function onMenuItemClick(e) {
          var route = e.itemData.route;
          if(route) {
              window.location.href = route;
          }
      }
    </script>

    <div class="container-fluid">
<main role="main">
        @RenderBody()
    </main>
    </div>

  </div>
  <script src="~/lib/dx/js/bootstrap.js"></script>
  <script src="~/js/tgwebapp.js"></script>
  @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
