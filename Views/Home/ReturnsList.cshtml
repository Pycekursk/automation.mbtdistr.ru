@using automation.mbtdistr.ru.ViewModels
@{
  ViewData["Title"] = "Возвраты";
  Layout = "/Views/Shared/_BotMenuLayout.cshtml";
}
@model List<Return>?
@{
  var modelName = typeof(Return).Name;
  var defaultExportFileName = $"{modelName}s_{DateTime.Now:yyyy-MM-dd}";
}

<script>
  var defaultExportFileName = '@defaultExportFileName';
</script>

  @using System.ComponentModel.DataAnnotations
@{
  var columns = typeof(Return).GetProperties()
  .Where(p =>
  {
    if (!p.CanRead) return false;
    var attr = p.GetCustomAttributes(typeof(DataGridAttribute), false)
  .Cast<DataGridAttribute>()
  .FirstOrDefault();
    return attr == null || attr.IsVisible; // пропускаем только если явно Visible == false
  })
  .Select(p => new
  {
    Field = p.Name,
    Caption = p.GetCustomAttributes(typeof(DisplayAttribute), false)
  .Cast<DisplayAttribute>()
  .FirstOrDefault()?.Name ?? p.Name,
    IsEnum = p.PropertyType.IsEnum,
    EnumType = p.PropertyType
  })
  .ToList();
}
@{
  var enumFields = typeof(Return).GetProperties()
  .Where(p => p.PropertyType.IsEnum)
  .ToList();
}
@(
Html.DevExtreme().DataGrid<Return>()
     .ID("gridContainer")
     .KeyExpr("Id")
     .Height("95vh")
     .ColumnAutoWidth(true)
     .ShowRowLines(true)
     .ShowBorders(true)
     .DataSource(Model)
      .Export(e => { e.Enabled(true); e.Formats(new string[] { "xlsx" }); })
          .OnExporting("onExportingHandler")
      .Columns(columnsBuilder =>
      {
        foreach (var col in columns)
        {

          DevExtreme.AspNet.Mvc.Builders.DataGridColumnBuilder<Return>? column = null;

          if (col.Field == "TargetLocation")
          {
            column = columnsBuilder.Add()
                .Caption(col.Caption)
                .CssClass("wrap-text-cell")
                .DataType(GridColumnDataType.String)
                .CalculateCellValue("function(data) { return data.TargetLocation ? data.TargetLocation.Name + ' ' + data.TargetLocation.Address.FullAddress : ''; }").AllowFiltering(true)
                .AllowSorting(false);
          }
          else
          {
            column = columnsBuilder.Add()
                .DataField(col.Field)
                .Caption(col.Caption);
            if (col.IsEnum)
            {
              var enumValues = Enum.GetValues(col.EnumType)
              .Cast<Enum>()
              .Select(e => new
              {
                Id = Convert.ToInt32(e),
                Name = e.GetDisplayName()
              })
              .ToList();

              column.Lookup(lookup => lookup
              .DataSource(enumValues)
              .ValueExpr("Id")
              .DisplayExpr("Name"));
            }
          }
        }
      })
       .ColumnChooser(cc =>
      {
        cc.Enabled(true)
         .Height("400px")
        .Mode(GridColumnChooserMode.Select)
        .Position(pc => pc
        .My(HorizontalAlignment.Right, VerticalAlignment.Top)
        .At(HorizontalAlignment.Right, VerticalAlignment.Bottom)
        .Of(".dx-datagrid-column-chooser-button")
        );

        cc.Search(ccs => ccs
        .Enabled(true)
        .EditorOptions(new { Placeholder = "Поиск" })
        );

        cc.Selection(ccs => ccs
        .AllowSelectAll(true)
        .SelectByClick(true)
        .Recursive(true)
        );
      })
        .Toolbar(toolbar =>
      {
        toolbar.Items(items =>
        {
          items.Add()
        .Location(ToolbarItemLocation.Before)
        .Widget(w =>
        {
          var b = w.Button();
          b.Text("Назад");
          b.OnClick("goBack");
          return b;
        });

          items.Add()
.Name("searchPanel") // <<< это добавляет поле поиска
.Location(ToolbarItemLocation.Center); // или Before/After

          items.Add()
        .Name("exportButton")
        .Location(ToolbarItemLocation.After);

          items.Add()
        .Name("columnChooserButton")
        .Location(ToolbarItemLocation.After);
        });
      })
     .LoadPanel(loadPanel => loadPanel.Enabled(true))
     .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Virtual))
     .Scrolling(scrolling => scrolling.ColumnRenderingMode(GridColumnRenderingMode.Virtual))
       .Pager(p =>
                                          {
                                            p.Visible(true);
                                            p.ShowPageSizeSelector(true);
                                            p.AllowedPageSizes(new int[] { 20, 50, 100 });
                                          })
     .Paging(p => p.PageSize(20)).AllowColumnReordering(true)
     .AllowColumnResizing(true)
     .StateStoring(s => s.Enabled(true).Type(StateStoringType.SessionStorage).StorageKey($"{modelName}_grid"))
     .Sorting(sorting => sorting.Mode(GridSortingMode.Multiple))
       .HeaderFilter(hf => hf.Visible(true))
                                          .FilterRow(f => f.Visible(true))

                                              .SearchPanel(s => s.Visible(true))
     .Selection(s => s.Mode(SelectionMode.Single))
     .KeyExpr("Id"))


