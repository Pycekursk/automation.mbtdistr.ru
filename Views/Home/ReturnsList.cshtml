@using automation.mbtdistr.ru.ViewModels
@{
  ViewData["Title"] = "Возвраты";
  Layout = "/Views/Shared/_BotMenuLayout.cshtml";
}
@model List<Return>?
@{
  var modelName = typeof(Return).Name;
  var defaultExportFileName = $"{modelName}s_{DateTime.Now:yyyy-MM-dd}";
}

<script>
  var defaultExportFileName = '@defaultExportFileName';
</script>

  @using System.ComponentModel.DataAnnotations
@{
  var columns = typeof(Return).GetProperties()
  .Where(p =>
  {
    if (!p.CanRead) return false;
    var attr = p.GetCustomAttributes(typeof(DataGridAttribute), false)
  .Cast<DataGridAttribute>()
  .FirstOrDefault();
    return attr == null || attr.IsVisible; // пропускаем только если явно Visible == false
  })
  .Select(p => new
  {
    Field = p.Name,
    Caption = p.GetCustomAttributes(typeof(DisplayAttribute), false)
  .Cast<DisplayAttribute>()
  .FirstOrDefault()?.Name ?? p.Name,
    IsEnum = p.PropertyType.IsEnum,
    EnumType = p.PropertyType
  })
  .ToList();
}
@{
  var enumFields = typeof(Return).GetProperties()
  .Where(p => p.PropertyType.IsEnum)
  .ToList();
}
@(
Html.DevExtreme().DataGrid<Return>()
     .ID("gridContainer")
     .KeyExpr("Id")
     .Height("95vh")
     .ColumnAutoWidth(true)
     .ShowRowLines(true)
     .ShowBorders(true)
     .DataSource(Model)
      .Export(e => { e.Enabled(true); e.Formats(new string[] { "xlsx" }); })
          .OnExporting("onExportingHandler")
      .Columns(columnsBuilder =>
      {
        foreach (var col in columns)
        {
          DevExtreme.AspNet.Mvc.Builders.DataGridColumnBuilder<Return>? column = null;
          if (col.Field == "TargetWarehouse")
          {
            column = columnsBuilder.Add()
                .Caption(col.Caption)
                .CssClass("wrap-text-cell")
                .DataType(GridColumnDataType.String)
                .CalculateCellValue("function(data) { return data.TargetWarehouse ? data.TargetWarehouse.Name + ' ' + data.TargetWarehouse.Address.FullAddress : ''; }").AllowFiltering(true)
                .AllowSorting(false);
          }
          else if (col.Field == "CurrentWarehouse")
          {
            column = columnsBuilder.Add()
              .Caption(col.Caption)
              .CssClass("wrap-text-cell")
              .DataType(GridColumnDataType.String)
              .CalculateCellValue("function(data) { return data.CurrentWarehouse ? data.CurrentWarehouse.Name + ' ' + data.CurrentWarehouse.Address.FullAddress : ''; }").AllowFiltering(true)
              .AllowSorting(false);
          }
          else if (col.Field == "Products")
          {
            column = columnsBuilder
              .AddFor(r => r.Products)            // типизированно укажем поле
              .Caption("Товары")
              .CssClass("wrap-text-cell")
              .CellTemplate(new JS("productsCellTemplate")) // имя JS-функции
              .AllowFiltering(true)
              .AllowSorting(true);
          }
          else if (col.Field == "Cabinet")
          {
            column = columnsBuilder.Add()
            .Caption(col.Caption)
              .CssClass("wrap-text-cell")
                .CalculateCellValue(@"function(data) { return data.Cabinet ? data.Cabinet.Name +'\n'+ data.Cabinet.Marketplace : ''; }").AllowFiltering(true)
.AllowSorting(false);
          }
          else
          {
            column = columnsBuilder.Add()
                                                   .DataField(col.Field)
                                                   .CssClass("wrap-text-cell")
                                                   .Caption(col.Caption);
          }
          if (col.IsEnum)
          {
            var enumValues = Enum.GetValues(col.EnumType)
            .Cast<Enum>()
            .Select(e => new
            {
              Id = Convert.ToInt32(e),
              Name = e.GetDisplayName()
            })
            .ToList();

            column.Lookup(lookup => lookup
            .DataSource(enumValues)
            .ValueExpr("Id")
            .DisplayExpr("Name"));
          }
        }
      })
       .ColumnChooser(cc =>
      {
        cc.Enabled(true)
         .Height("400px")
        .Mode(GridColumnChooserMode.Select)
        .Position(pc => pc
        .My(HorizontalAlignment.Right, VerticalAlignment.Top)
        .At(HorizontalAlignment.Right, VerticalAlignment.Bottom)
        .Of(".dx-datagrid-column-chooser-button")
        );

        cc.Search(ccs => ccs
        .Enabled(true)
        .EditorOptions(new { Placeholder = "Поиск" })
        );

        cc.Selection(ccs => ccs
        .AllowSelectAll(true)
        .SelectByClick(true)
        .Recursive(true)
        );
      })
        .Toolbar(toolbar =>
      {
        toolbar.Items(items =>
        {
          items.Add()
        .Location(ToolbarItemLocation.Before)
        .Widget(w =>
        {
          var b = w.Button();
          b.Text("Назад");
          b.OnClick("goBack");
          return b;
        });

          items.Add()
.Name("searchPanel") // <<< это добавляет поле поиска
.Location(ToolbarItemLocation.Center); // или Before/After

          items.Add()
        .Name("exportButton")
        .Location(ToolbarItemLocation.After);

          items.Add()
        .Name("columnChooserButton")
        .Location(ToolbarItemLocation.After);
        });
      })
     .LoadPanel(loadPanel => loadPanel.Enabled(true))
     .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Virtual))
     .Scrolling(scrolling => scrolling.ColumnRenderingMode(GridColumnRenderingMode.Virtual))
       .Pager(p =>
                                          {
                                            p.Visible(true);
                                            p.ShowPageSizeSelector(true);
                                            p.AllowedPageSizes(new int[] { 20, 50, 100 });
                                          })
     .Paging(p => p.PageSize(20)).AllowColumnReordering(true)
     .AllowColumnResizing(true)
     .StateStoring(
         s => s.Enabled(true)
        .Type(StateStoringType.SessionStorage)
        .StorageKey($"{modelName}_grid"))
     .Sorting(sorting => sorting.Mode(GridSortingMode.Multiple))
     .HeaderFilter(hf => hf.Visible(true))
                                          .FilterRow(f => f.Visible(true))

                                              .SearchPanel(s => s.Visible(true))
     .Selection(s => s.Mode(SelectionMode.Single))
     .KeyExpr("Id")
)

<!-- JS-функция рендеринга ячейки "Products" -->
<script type="text/javascript">
  function productsCellTemplate(container, options) {
      // console.log("productsCellTemplate called", options);
    var products = options.data.Products;
    if (!products || !products.length) {
      // можно оставить пустую строку или сообщение
      return;
    }

    // создаём список
    var $ul = $("<ul>").css({ paddingLeft: "1em", margin: 0 });
    products.forEach(function(p, i) {
      var $li = $("<li>").css("margin-bottom", "0.5em");
      $li.text((i + 1) + ". " + p.Name + " (" + p.OfferId + ")");

      console.log(p.Images, p.images);

      // если есть изображения — добавляем кнопку
      if (p.Images && p.Images.length) {
        var button = $("<div>").dxButton({
          text: "Показать изображения",
          stylingMode: "text",
          onInitialized: function(e) {
            e.element.css({
              color: "green",
              cursor: "pointer"
            });
          },
          onClick: function() {
            showImages(p.Images);
          }
        });
        // Добавляем кнопку после текста
        $li.append(" ").append(button);
      }

      $ul.append($li);
    });

    // Вставляем весь список в контейнер ячейки
    $(container).append($ul);
  }

  // Существующая функция для показа Popup с каруселью
  function showImages(images) {
      console.log("showImages called", images);
    var popup = $("#imagesPopup").dxPopup({
      title: "Изображения товара",
      showTitle: true,
      width: 600,
      height: "auto",
      dragEnabled: true,
      resizeEnabled: true,
      contentTemplate: function() {
        var $carousel = $("<div>").addClass("image-carousel");
        images.forEach(function(img) {
          $carousel.append(
            $("<div>").append(
              $("<img>")
                .attr("src", img.Url)
                .css({
                  "max-width": "100%",
                  "margin-bottom": "10px",
                  "border-radius": "4px",
                  "box-shadow": "0 2px 6px rgba(0,0,0,0.2)"
                })
            )
          );
        });
        return $carousel;
      },
      onHidden: function() {
        popup.dispose();
      },
      visible: true
    }).dxPopup("instance");
  }
</script>

<!-- Контейнер для Popup -->
<div id="imagesPopup"></div>

<style>
  .image-carousel {
    display: flex;
    overflow-x: auto;
    gap: 10px;
    padding: 10px 0;
  }

    .image-carousel img {
      flex: 0 0 auto;
      max-height: 200px;
    }
</style>
